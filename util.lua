function trim(s)
  local n = s:find"%S"
  return n and s:match(".*%S", n) or ""
end

function to_html(h, indent)
  indent = indent or ''
  local res = ''
  if h._tag then
    res = res..indent..'<'..h._tag..attrs(h._attr)..'>\n'
  end
  if type(h) == 'table' then
    for i,v in ipairs(h) do
      res = res..to_html(v, h._tag and indent..'  ' or indent)
    end
  elseif type(h) == 'string' then
    local s = trim(h)
    if #s > 0 then
      -- res = res..'  ![CDATA['..s..']]'
      res = res..'  '..s..''
    end
  end
  if h._tag then
    res = res..indent..'</'..h._tag..'>\n'
  end
  
  return res
end

function attrs(attrl)
  if attrl == nil then return '' end
  local res = ''
  for key in pairs(attrl) do
    res = res..' '..key..'="'..encode(attrl[key])..'"'
  end
  return res
end

function encode(str)
	if "string" ~= type(str) then str = tostring(str) end
	local repl = {["<"] = "&lt;", [">"] = "&gt;", ["\""] = "&quot;", ["&"] = "&amp;"}
	return (string.gsub(str, "[<>\"&]", repl))
end



-- debug
function pt(tab, ident)
  ident = ident or 0
  for _, value in ipairs(tab) do
    if type(value) == 'table' then
      print(value.tag..':')
      pt(value, ident+1)
    elseif type(value) == 'string' then
      print(ident..'!!'..value..'!!')
    else 
      print('??'..type(value))
    end
  end
end

require 'io'
-- saves a Lua var as xml file
function save(xml, filename)
  if not filename or #filename==0 then return end
  local file = io.open(filename,"w")
  file:write("<?xml version=\"1.0\"?>\n<!-- file \"",filename, "\", generated by LuaXML -->\n\n")
  file:write(xml)
  io.close(file)
end
